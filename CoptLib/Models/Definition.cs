using System.Collections.Generic;
using System.Xml.Serialization;

namespace CoptLib.Models;

/// <summary>
/// An interface for anything that can be defined in a <see cref="Doc"/>.
/// </summary>
public interface IDefinition
{
    /// <summary>
    /// A key that can be used to identify this definition.
    /// </summary>
    string? Key { get; set; }

    /// <summary>
    /// The document this definition belongs to.
    /// </summary>
    Doc? DocContext { get; set; }

    /// <summary>
    /// The parent definition, if any.
    /// </summary>
    IDefinition? Parent { get; set; }

    /// <summary>
    /// Whether the definition was defined explicitly as opposed to
    /// generated by a script or the result of a text command.
    /// </summary>
    bool IsExplicitlyDefined { get; set; }

    /// <summary>
    /// Gets all definitions that reference this definition.
    /// </summary>
    ICollection<IDefinition> References { get; }
}

/// <summary>
/// A base class for any object that can be referenced by other objects.
/// </summary>
public abstract class Definition : IDefinition
{
    public string? Key { get; set; }

    public Doc? DocContext { get; set; }

    public IDefinition? Parent { get; set; }

    public bool IsExplicitlyDefined { get; set; }

    public ICollection<IDefinition> References { get; } = new List<IDefinition>();
}

public class Variable : Definition
{
    [XmlAttribute]
    public bool Configurable { get; set; }

    [XmlAttribute]
    public string? Label { get; set; }

    [XmlAttribute]
    public object? DefaultValue { get; set; }
}